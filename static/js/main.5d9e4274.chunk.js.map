{"version":3,"sources":["assets/images/eclipse-loader.gif","components/Navbar.js","pages/Home.js","components/Card.js","config.js","components/ApiData.js","pages/Movies.js","pages/Shows.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","es_Navbar","dark","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","tag","Link","exact","to","activeClassName","React","Component","Home","id","Card","console","log","href","concat","cardType","image","target","title","name","overview","src","poster_path","config","API_KEY","SESSION_ID","ACCOUNT_ID","ApiData","items","found","componentDidMount","results","_callee","api_key","session_id","account_id","api_url","i","pages","regenerator_default","wrap","_context","prev","next","dataType","axios","get","then","resolve","data","map","item","push","catch","error","stop","_this2","posters","images","components_Card","eclipse","Movies","components_ApiData","Shows","NotFound","App","components_Navbar","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d9e4274.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eclipse-loader.3c64a786.gif\";","import {\n    Collapse,\n    Navbar as Navigation,\n    NavbarToggler,\n    Nav,\n    NavItem,\n    NavLink,\n    NavbarBrand\n} from 'reactstrap';\n\nimport React from 'react';\nimport { NavLink as Link } from 'react-router-dom';\nimport '../css/Navbar.css'\n\n\nclass Navbar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <Navigation dark expand=\"md\">\n                <NavbarBrand></NavbarBrand>\n                <NavbarToggler onClick={this.toggle} />\n\n                <Collapse isOpen={this.state.isOpen} navbar>\n\n\n                    <Nav className=\"mx-auto\" >\n                        <NavItem>\n                            <NavLink tag={Link} exact to=\"/\" className=\"inactive\" activeClassName=\"active\">\n                                <h3>HOME</h3>\n                            </NavLink>\n                        </NavItem>\n\n                        <NavItem>\n                            <NavLink tag={Link} to=\"/movies\" className=\"inactive\" activeClassName=\"active\">\n                                <h3>MOVIES </h3>\n                            </NavLink>\n\n                        </NavItem>\n                        <NavItem>\n                            <NavLink tag={Link} to=\"/shows\" className=\"inactive\" activeClassName=\"active\">\n                                <h3>SHOWS</h3>\n                            </NavLink>\n                        </NavItem>\n\n\n\n                    </Nav>\n                </Collapse>\n            </Navigation>\n\n        )\n    }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport '../css/Home.css'\n\n\nfunction Home() {\n  return (\n    <div id=\"home-container\">\n      <h2>Why Must Watch TV Shows and Movies?</h2>\n      <p>\n    I'm very picky when it comes to movies and tv shows. After hours, days, and even weeks of looking at movie and tv show trailers, I got bored of seeing the typical plot, which I know will lead to the typical ending. I like watching tv shows and movies that make me feel more than just sad, happy, or scared. I like to watch things that make me think and question. I also got bored of browsing websites that only displayed the movie poster with a long summary, and no trailer. That's why I created this website. Simple. To the point. And movies and tv shows you might have never heard of. Most of the tv shows and movies included in these lists are science fiction, so if you like this genre, you defintely have to checkout some of these titles. However, I do have in these lists other genres as well. These titles are definetely worth watching, as many of them are underrated, and are overshadowed by mainstream titles. Although I'm one to avoid tv shows that have been cancelled, I did include some tv shows that have been cancelled. I included these tv shows because they are worth watching, and they left me wondering of what could have happened.\n\n    </p>\n\n    \n    </div>\n\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport '../css/Card.css'\n\n\nfunction Card(props) {\n    console.log(props)\n    return (\n\n        <a href={`https://www.themoviedb.org/${props.cardType}/${props.image.id}`} target=\"_blank\">\n\n            <div className=\"card-container\" >\n\n                <div className=\"card-overlay\">\n                    <p className=\"card-title\">{props.image.title} {props.image.name}</p>\n                    <p className=\"card-overview\">{props.image.overview} </p>\n                </div>\n                <img src={`https://image.tmdb.org/t/p/original/${props.image.poster_path}`} className=\"card-size\" />\n\n\n            </div>\n        </a>\n\n\n\n\n    )\n}\n\n\nexport default Card;","const config = {\n\n    API_KEY: '1fb718e33990d4d733d6e019892804af',\n    SESSION_ID: 'ff716a659cc0ae54f11d8d6e40935f4d21fd9a60',\n    ACCOUNT_ID: 'jasmincher'\n    \n}\n\nexport default config;","import React from 'react';\nimport axios from 'axios'\nimport Card from './Card'\nimport '../css/ApiData.css'\nimport config from '../config'\nimport eclipse from '../assets/images/eclipse-loader.gif'\n\nclass ApiData extends React.Component {\n  state = {\n    items: [],\n    found: false\n  }\n  //here we are initiating the API \n  componentDidMount = () => {\n    console.log('component did mount')\n    this.results();\n  }\n\n  results = async () => {\n    console.log('in rsults function')\n\n    var base_url = 'https://api.themoviedb.org/3/account/'\n    var api_key = config.API_KEY;\n    var session_id = config.SESSION_ID;\n    var account_id = config.ACCOUNT_ID;\n\n\n\n    let api_url = base_url + account_id + `/favorite/${this.props.dataType}?api_key=` + api_key + '&session_id=' + session_id + '&language=en-US&sort_by=created_at.asc&page=';\n\n\n\n    for (let i = 1; i < 3; i++) {\n      var pages = api_url + i;\n\n\n\n      axios.get(pages)\n        .then((resolve) => {\n\n          //this is mapping through each item in the api and pushing each item into the items array\n          resolve.data.results.map(item => { this.state.items.push(item) })\n\n          //this is making the boolean true so it can display the results\n          this.setState({ found: true });\n\n          console.log('Yay we got the posters')\n          console.log(this.state.items)\n\n        })\n\n        .catch((error) => {\n          console.log('Something went wrong')\n          this.setState({ found: false })\n        })\n\n    }\n  }\n\n\n\n  render() {\n    console.log('rendered')\n\n    if (this.state.found) {\n      const posters = this.state.items.map(images => <Card image={images} cardType={this.props.cardType} />)\n\n      return (\n\n        <div id=\"posters-container\">\n          {posters}\n        </div>\n      )\n    }\n    return (\n      <div className=\"loader\">\n       <img src={eclipse} className=\"loader-img\"/>\n      </div>\n    )\n  }\n\n}\n\nexport default ApiData;","import React from 'react';\nimport ApiData from '../components/ApiData'\n\nfunction Movies() {\n\n  return (\n      <ApiData dataType=\"movies\" cardType=\"movie\"/>\n    )\n  }\n\nexport default Movies;","import React from 'react';\nimport ApiData from '../components/ApiData'\n\nfunction Shows() {\n\n  return (\n      <ApiData dataType=\"tv\" cardType=\"tv\"/>\n    )\n  }\n\n\nexport default Shows;","import React from 'react'\n\n\nfunction NotFound() {\n    return (\n        <div>\n            <h1>Sorry Page Not Found </h1>\n            <br />\n            <h1>🤷🏻</h1>\n        </div>\n\n    );\n}\n\n\nexport default NotFound;","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar'\nimport Home from './pages/Home'\nimport Movies from './pages/Movies'\nimport Shows from './pages/Shows'\nimport NotFound from './pages/NotFound'\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n  \n\n      <Switch>\n\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/movies\" component={Movies} />\n        <Route path=\"/shows\" component={Shows} />\n        <Route component= {NotFound} />\n      </Switch>\n\n    \n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(<BrowserRouter> <App /> </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}